name: Generate Gradle Wrapper + Build Debug APK

on:
  workflow_dispatch: {}
  push:
    branches:
      - main

permissions:
  contents: write   # نحتاج هذا لتمكين دفع (commit/push) الملفات المولدة إلى الفرع إن أمكن

env:
  ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
  GRADLE_VERSION_TO_GENERATE: 8.5.1

jobs:
  gen-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Configure git user (for possible commit)
        run: |
          git config --global user.name "github-actions[bot]" || true
          git config --global user.email "actions@github.com" || true

      - name: Generate Gradle wrapper if missing (using downloaded Gradle)
        run: |
          set -euo pipefail

          if [ -f "./gradlew" ] && [ -f "./gradle/wrapper/gradle-wrapper.properties" ] && [ -f "./gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "Gradle wrapper already present — skipping generation."
          else
            echo "==> Generating Gradle wrapper using local downloaded Gradle ${GRADLE_VERSION_TO_GENERATE}"
            GRV="${GRADLE_VERSION_TO_GENERATE}"
            D=/tmp/gradle-${GRV}
            ZIP=/tmp/gradle-${GRV}.zip

            if [ ! -f "${ZIP}" ]; then
              curl -fsSL "https://services.gradle.org/distributions/gradle-${GRV}-bin.zip" -o "${ZIP}"
            fi

            rm -rf "${D}" || true
            unzip -q -o "${ZIP}" -d /tmp
            chmod +x /tmp/gradle-${GRV}/bin/gradle

            # run gradle wrapper inside repo to generate gradlew, wrapper jar and properties
            /tmp/gradle-${GRV}/bin/gradle wrapper --gradle-version "${GRV}" --distribution-type all || true

            # make gradlew executable
            if [ -f "./gradlew" ]; then
              chmod +x ./gradlew || true
            fi

            # try to commit & push generated wrapper back to repo (best-effort)
            git add gradlew gradlew.bat gradle/wrapper || true
            git commit -m "ci: add generated Gradle wrapper (${GRV})" || echo "nothing to commit or commit failed"
            git push origin HEAD:main || echo "push failed (may be branch-protected or token limited) - build will continue anyway"
          fi

      - name: Install Android commandline-tools (safe extract)
        run: |
          set -euo pipefail
          mkdir -p "${ANDROID_SDK_ROOT}"
          cd "${ANDROID_SDK_ROOT}"

          ZIP=/tmp/cmdline.zip
          if [ ! -f "${ZIP}" ]; then
            wget -q --show-progress "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" -O "${ZIP}"
          fi

          TMPDIR="$(mktemp -d)"
          unzip -q -o "${ZIP}" -d "${TMPDIR}"

          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"

          # Find the folder that contains sdkmanager and copy its contents into cmdline-tools/latest
          SDKMANAGER_DIR="$(find "${TMPDIR}" -type f -name sdkmanager -printf '%h' -quit || true)"
          if [ -n "${SDKMANAGER_DIR}" ]; then
            mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
            cp -a "${SDKMANAGER_DIR}/." "${ANDROID_SDK_ROOT}/cmdline-tools/latest/" || true
          else
            echo "Could not find sdkmanager in extracted zip - listing for debug:"
            ls -la "${TMPDIR}" || true
            # still try to copy everything
            cp -a "${TMPDIR}/." "${ANDROID_SDK_ROOT}/" || true
          fi

          rm -rf "${TMPDIR}" || true
          echo "cmdline-tools installed under ${ANDROID_SDK_ROOT}/cmdline-tools"

      - name: Accept licenses & install required SDK packages
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euo pipefail
          export PATH="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/cmdline-tools/bin:${PATH}"
          mkdir -p "${ANDROID_SDK_ROOT}/licenses"

          if command -v sdkmanager >/dev/null 2>&1; then
            yes | sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" "platform-tools" "platforms;android-33" "build-tools;33.0.2" || true
            yes | sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" --licenses || true
          else
            echo "sdkmanager not available: listing ${ANDROID_SDK_ROOT}/cmdline-tools for debugging"
            ls -la "${ANDROID_SDK_ROOT}/cmdline-tools" || true
            exit 1
          fi

      - name: Build debug APK (use wrapper if present)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euo pipefail
          if [ -x "./gradlew" ]; then
            echo "Running ./gradlew assembleDebug"
            ./gradlew assembleDebug --no-daemon
          else
            echo "No gradlew executable found. Attempting system gradle (may fail)."
            sudo apt-get update -y
            sudo apt-get install -y gradle || true
            if command -v gradle >/dev/null 2>&1; then
              gradle assembleDebug --no-daemon || true
            else
              echo "No gradle available — cannot build."
              exit 1
            fi
          fi

      - name: Upload APK artifact (if any)
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apks
          path: app/build/outputs/apk/**/debug/*.apk
          if-no-files-found: warn
