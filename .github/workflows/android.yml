name: Generate wrapper (optional) + Build Debug APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
  # تعيين نسخة Gradle التي نريد أن يولّد بها wrapper لو احتجنا
  GRADLE_WRAPPER_VERSION: 8.5.1

jobs:
  generate-wrapper:
    name: Generate Gradle wrapper if missing
    runs-on: ubuntu-latest
    outputs:
      wrapper_created: ${{ steps.check_wrapper.outputs.wrapper_created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Check for existing gradlew
        id: check_wrapper
        run: |
          if [ -x "./gradlew" ] && [ -f "./gradle/wrapper/gradle-wrapper.properties" ]; then
            echo "wrapper_created=false" > wrapper_flag.txt
            echo "::set-output name=wrapper_created::false"
            exit 0
          fi
          echo "wrapper_created=true" > wrapper_flag.txt
          echo "::set-output name=wrapper_created::true"

      - name: Install system gradle (if wrapper needed)
        if: steps.check_wrapper.outputs.wrapper_created == 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gradle

      - name: Generate wrapper (if needed)
        if: steps.check_wrapper.outputs.wrapper_created == 'true'
        run: |
          # Force generate wrapper with a modern Gradle version so plugin resolution works
          gradle wrapper --gradle-version "${GRADLE_WRAPPER_VERSION}" --distribution-type all || true
          git config user.name "github-actions[bot]" || true
          git config user.email "actions@github.com" || true
          git add gradlew gradlew.bat gradle/wrapper || true
          git commit -m "chore(ci): add generated gradle wrapper" || true
          # push back only if GITHUB_TOKEN allows
          git push origin HEAD:main || true

  build:
    name: Build Debug APK
    needs: generate-wrapper
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (fetch full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure gradlew is executable
        if: always()
        run: |
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew || true
          else
            echo "Warning: gradlew missing; build may fail."
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android commandline-tools (robust)
        id: sdk_install
        run: |
          set -e
          mkdir -p "${ANDROID_SDK_ROOT}"
          cd "${ANDROID_SDK_ROOT}"

          # Download latest commandline-tools zip (note: URL may change in future - this is the stable general approach)
          TEMP_ZIP="cmdline.zip"
          if [ ! -f "${TEMP_ZIP}" ]; then
            wget -q --show-progress https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O "${TEMP_ZIP}"
          fi

          # Extract into temp folder to avoid moving into itself
          TMPDIR="$(mktemp -d)"
          unzip -q -o "${TEMP_ZIP}" -d "${TMPDIR}"

          # The zip usually contains a top-level "cmdline-tools" folder which itself contains "bin", or a "cmdline-tools" with 'latest' inside.
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          # Move content safely (avoid moving into itself)
          if [ -d "${TMPDIR}/cmdline-tools" ]; then
            # Move children into android-sdk/cmdline-tools, but don't attempt to move if paths match
            for ENTRY in "${TMPDIR}/cmdline-tools"/*; do
              # compute realpaths to avoid "move into subdir of itself" errors
              SRC_REAL=$(realpath "$ENTRY")
              DST="${ANDROID_SDK_ROOT}/cmdline-tools/$(basename "$ENTRY")"
              DST_REAL=$(realpath -m "$DST")
              if [ "$SRC_REAL" = "$DST_REAL" ]; then
                echo "Skipping move of $ENTRY -> $DST (same path)"
                continue
              fi
              rm -rf "$DST" || true
              mv "$ENTRY" "${ANDROID_SDK_ROOT}/cmdline-tools/" || true
            done
          else
            echo "Unexpected cmdline-tools layout; copying all"
            rsync -a "${TMPDIR}/" "${ANDROID_SDK_ROOT}/" || true
          fi

          rm -rf "${TMPDIR}" || true
          echo "sdk installed to ${ANDROID_SDK_ROOT}"

      - name: Accept licenses & install SDK packages
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -e
          export PATH="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/cmdline-tools/bin:${PATH}"
          mkdir -p "${ANDROID_SDK_ROOT}/licenses"

          # ensure sdkmanager exists
          if command -v sdkmanager >/dev/null 2>&1; then
            echo "sdkmanager present"
          else
            echo "sdkmanager not found; listing cmdline-tools content:"
            ls -la "${ANDROID_SDK_ROOT}/cmdline-tools" || true
          fi

          # Install platform-tools, build-tools and a platform (adjust versions as needed)
          yes | sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;25.2.9519653" || true

          # Accept licenses (non-interactive)
          yes | sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" --licenses || true

      - name: Build debug APK with Gradle
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          JAVA_HOME: ${{ steps.setup-java.outputs.path || '' }}
        run: |
          set -e
          if [ -x "./gradlew" ]; then
            ./gradlew assembleDebug --no-daemon
          else
            echo "gradlew not found: attempting 'gradle assembleDebug' (may fail)"
            sudo apt-get update -y
            sudo apt-get install -y gradle
            gradle assembleDebug --no-daemon || true
          fi

      - name: Upload APK artifact (if exists)
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/outputs/apk/**/debug/*.apk
