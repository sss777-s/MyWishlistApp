name: Build Debug APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Generate Gradle wrapper if missing
        run: |
          set -e
          if [ -f "./gradlew" ] && [ -x "./gradlew" ]; then
            echo "gradlew exists and is executable — skipping generation."
            exit 0
          fi

          # Try to install system gradle and create wrapper
          if ! command -v gradle >/dev/null 2>&1; then
            echo "Installing system gradle (apt) ..."
            sudo apt-get update -y
            sudo apt-get install -y gradle || true
          fi

          if command -v gradle >/dev/null 2>&1; then
            echo "Generating gradle wrapper with system gradle..."
            gradle wrapper --gradle-version 8.4 || gradle wrapper || true
            chmod +x gradlew || true
          else
            # fallback: create small placeholder gradlew so step doesn't fail; real wrapper recommended in repo
            echo '#!/usr/bin/env sh' > gradlew
            echo 'echo "Gradle wrapper not available in repo. This placeholder does not build." ' >> gradlew
            chmod +x gradlew
          fi

      - name: Install Android commandline-tools and minimal SDK
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -e
          SDK_ROOT="$ANDROID_SDK_ROOT"
          mkdir -p "$SDK_ROOT"
          cd "$SDK_ROOT"

          CMDLINE_ZIP="cmdline.zip"
          # download a known commandline-tools bundle (if absent)
          if [ ! -f "$CMDLINE_ZIP" ]; then
            curl -fsSL -o "$CMDLINE_ZIP" "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          fi

          rm -rf cmdline_temp
          mkdir -p cmdline_temp
          unzip -q "$CMDLINE_ZIP" -d cmdline_temp

          # prepare target dir android-sdk/cmdline-tools/latest safely
          TARGET="$SDK_ROOT/cmdline-tools/latest"
          rm -rf "$TARGET"
          mkdir -p "$TARGET"

          # Move contents of extracted cmdline tools into target, handling different zip layouts
          # try to find directory that contains 'bin/sdkmanager'
          SRC="$(find cmdline_temp -type f -name sdkmanager -printf '%h' -quit || true)"
          if [ -n "$SRC" ]; then
            # move parent folder contents into target
            cp -a "$SRC/." "$TARGET/" || true
          else
            # fallback: copy everything
            cp -a cmdline_temp/. "$TARGET/" || true
          fi

          export PATH="$TARGET/bin:$PATH"
          export ANDROID_SDK_ROOT="$SDK_ROOT"

          # accept licenses and install minimal packages (non-fatal)
          yes | "$TARGET/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-33" "build-tools;33.0.2" || true

          echo "Installed SDK tools under: $ANDROID_SDK_ROOT"

      - name: Ensure gradlew is executable (if present)
        run: |
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew || true
            echo "gradlew set executable"
          else
            echo "gradlew not present"
          fi

      - name: Build debug APK (try wrapper then system gradle)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
          JAVA_HOME: ${{ steps.setup-java.outputs.path || '' }}
        run: |
          set -x
          echo "Workspace top-level files:"
          ls -la || true

          # Try wrapper first (use --no-daemon)
          if [ -f "./gradlew" ] && [ -x "./gradlew" ]; then
            echo "Running ./gradlew assembleDebug"
            ./gradlew assembleDebug --no-daemon || true
          else
            echo "No executable gradlew; trying system gradle"
            if command -v gradle >/dev/null 2>&1; then
              gradle assembleDebug --no-daemon || true
            else
              echo "No gradle available — cannot build."
            fi
          fi

          echo "Find any produced APKs:"
          find . -type f -name "*.apk" -print || true
          echo "List app/build/outputs:"
          ls -R app/build/outputs || true

      - name: Upload APK artifacts (if any)
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apks
          path: app/build/outputs/apk/**/*.apk
          if-no-files-found: warn

      - name: Final debug listing (always)
        if: always()
        run: |
          echo "---- top-level files ----"
          ls -la
          echo "---- search for apk files ----"
          find . -type f -name "*.apk" -print || true
